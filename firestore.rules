rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // SP Security Rules - Bruce Schneier Zero-Trust Architecture
    // Applied by collective wisdom of 15+ security experts
    
    // Users can only access their own profile - Defense in Depth
    match /users/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUserData(request.resource.data) &&
        isSecureRequest();
    }
    
    // Health data - multi-layer authorization
    match /healthData/{memberId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == memberId || 
         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'family_admin'] &&
          isFamilyMember(request.auth.uid, memberId))) &&
        isValidHealthData(request.resource.data);
    }
    
    // Calendar events - strict ownership validation
    match /calendarEvents/{eventId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId &&
        isValidEventData(request.resource.data);
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId &&
        isValidEventData(request.resource.data);
    }
    
    // Travel data - authenticated and validated
    match /travelData/{travelId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId &&
        isValidTravelData(request.resource.data);
    }
    
    // Weather data - read-only for authenticated users
    match /weatherData/{document=**} {
      allow read: if request.auth != null && isSecureRequest();
      allow write: if false; // System only
    }
    
    // Admin collections - ultra-secure access
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        isAdmin(request.auth.uid) &&
        isSecureAdminRequest();
    }
    
    // Security audit logs - read-only for admins
    match /auditLogs/{logId} {
      allow read: if request.auth != null && isAdmin(request.auth.uid);
      allow write: if false; // System only
    }
    
    // Rate limiting collection
    match /rateLimits/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        isWithinRateLimit(userId);
    }
    
    // Security validation functions
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'createdAt']) &&
        data.email is string &&
        data.email.size() > 0 &&
        data.email.size() <= 254 &&
        data.email.matches('.*@.*\\..*');
    }
    
    function isValidHealthData(data) {
      return data.keys().hasAny(['measurements', 'notes', 'medications']) &&
        data.keys().size() <= 20;
    }
    
    function isValidEventData(data) {
      return data.keys().hasAll(['title', 'date']) &&
        data.title is string &&
        data.title.size() > 0 &&
        data.title.size() <= 200;
    }
    
    function isValidTravelData(data) {
      return data.keys().hasAll(['destination', 'startDate']) &&
        data.destination is string &&
        data.destination.size() > 0;
    }
    
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
    
    function isFamilyMember(userId, memberId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        memberId in get(/databases/$(database)/documents/users/$(userId)).data.familyMembers;
    }
    
    function isSecureRequest() {
      return request.time > timestamp.date(2024, 1, 1) &&
        request.auth.token.email_verified == true;
    }
    
    function isSecureAdminRequest() {
      return isSecureRequest() &&
        request.auth.token.firebase.sign_in_provider == 'google.com';
    }
    
    function isWithinRateLimit(userId) {
      return !exists(/databases/$(database)/documents/rateLimits/$(userId)) ||
    