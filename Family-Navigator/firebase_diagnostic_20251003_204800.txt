FIREBASE WEBSITE DIAGNOSTIC REPORT
Generated: Fri Oct  3 08:48:01 PM UTC 2025
========================================================================

1. PROJECT STRUCTURE ANALYSIS
========================================================================

❌ CRITICAL: Family-Navigator directory not found!
   The entire project should be inside Family-Navigator/

Backup Directories Found:
  ⚠️  ./backup (7 files)

2. CONFIGURATION FILES VERIFICATION
========================================================================

✅ next.config.js exists

Configuration preview:
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Security headers
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
        ],
      },
    ]
  },

  // Image optimization

✅ package.json exists

Scripts defined:
  "scripts": {
    "dev": "node node_modules/next/dist/bin/next dev",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit",
    "type-check": "tsc --noEmit",
    "clean": "rm -rf .next out dist",
    "reinstall": "rm -rf node_modules package-lock.json && npm install",

Next.js version:
    "next": "^15.0.0",

✅ tsconfig.json exists

Path mappings:
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules", ".next", "dist", "credentials"]
}

✅ firebase.json exists

{
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  }
}


3. FIREBASE SDK ANALYSIS
========================================================================

Checking for Admin SDK imports in client-side code:

src/firebase.admin.ts:import * as admin from 'firebase-admin';
src/lib/firebase-admin.ts:import { initializeApp, getApps, cert } from 'firebase-admin/app';
src/lib/firebase-admin.ts:import { getFirestore } from 'firebase-admin/firestore';
src/lib/firebase-admin.ts:import { getAuth } from 'firebase-admin/auth';

❌ CRITICAL: firebase-admin found in client-side code!
   Admin SDK should NEVER be imported in browser code

Firebase client imports found:
src/services/auth-service.ts:} from 'firebase/auth';
src/services/client-data-service.ts:} from 'firebase/firestore';
src/services/travel-service.ts:import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore';
src/firebase.admin.ts:import * as admin from 'firebase-admin';
src/lib/firebase-admin.ts:import { initializeApp, getApps, cert } from 'firebase-admin/app';
src/lib/firebase-admin.ts:import { getFirestore } from 'firebase-admin/firestore';
src/lib/firebase-admin.ts:import { getAuth } from 'firebase-admin/auth';
src/lib/firebase-client.ts:import { initializeApp } from "firebase/app";
src/lib/firebase-client.ts:import { getAuth } from "firebase/auth";
src/lib/firebase-client.ts:import { getFirestore } from "firebase/firestore";
src/lib/firebase-auth.ts:} from 'firebase/auth';
src/lib/firebase-auth.ts:} from 'firebase/firestore';

Checking Firebase initialization files:

  File: src/services/data-service.firebase.ts
  Preview:

'use server';

import { adminDb } from '@/firebase.admin';
import type { HealthData, FamilyMember, AppState } from '@/lib/types';
import fs from 'fs/promises';
import path from 'path';

const emptyHealthData: HealthData = {
  height: "",
  age: 0,
  gender: "Other",
  weight: "",
  glucose: "",
  notes: "",
};

const defaultState: AppState = {
  Adam: { ...emptyHealthData, gender: "Male" },
  Holly: { ...emptyHealthData, gender: "Female" },

  File: src/firebase.admin.ts
  Preview:
import * as admin from 'firebase-admin';

const serviceAccountString = process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON;

if (!serviceAccountString) {
  throw new Error('The GOOGLE_APPLICATION_CREDENTIALS_JSON environment variable is not set. It is required for server-side Firebase operations.');
}

const serviceAccount = JSON.parse(serviceAccountString);

if (admin.apps.length === 0) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

const adminDb = admin.firestore();
const adminAuth = admin.auth();

export { adminDb, adminAuth };

  File: src/lib/firebase-admin.ts
  Preview:
/**
 * Firebase Admin Configuration - Server Side Only
 * Never import this in client-side components
 */

import { initializeApp, getApps, cert } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';
import { getAuth } from 'firebase-admin/auth';

const adminConfig = {
  credential: cert({
    projectId: process.env.FIREBASE_PROJECT_ID,
    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  }),
  projectId: process.env.FIREBASE_PROJECT_ID,
};

// Initialize admin app
const adminApp = getApps().length === 0 ? initializeApp(adminConfig, 'admin') : getApps()[0];

  File: src/lib/firebase-client.ts
  Preview:
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

// Pull from environment (Firebase injects these in preview/deploy)
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
export default app;

  File: src/lib/firebase-auth.ts
  Preview:

"use client";

import { useState, useEffect } from 'react';
import { 
  User,
  signInWithPopup, 
  signOut as firebaseSignOut,
  onAuthStateChanged,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  GoogleAuthProvider
} from 'firebase/auth';
import { 
  doc, 
  getDoc, 
  setDoc, 
  updateDoc,
  serverTimestamp
} from 'firebase/firestore';

4. TYPESCRIPT ERRORS CHECK
========================================================================

Checking health-tracker.tsx for type errors:

"use client";
import { useState, useEffect } from "react";
import { useForm, Controller, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import type { FamilyMember, HealthData, AppState } from "@/lib/types";
import { ClientDataService } from "@/services/client-data-service";
import { Loader2 } from "lucide-react";
import { Badge } from "./ui/badge";

const familyMembers: FamilyMember[] = ["Adam", "Holly", "Ethan", "Elle"];

const healthSchema = z.object({
  height: z.string().min(1, "Height is required"),
  age: z.coerce.number().positive("Age must be positive"),
  gender: z.enum(["Male", "Female", "Other"]).optional(),
  weight: z.string().min(1, "Weight is required"),
  glucose: z.string().min(1, "Glucose level is required"),
  notes: z.string().max(140, "Notes must be 140 characters or less").optional(),
});

type HealthFormData = z.infer<typeof healthSchema>;

function HealthForm({
  member,
  data,
  onSave,
  isSaving,
}: {

Checking types.ts for HealthData definition:

export const HealthDataSchema = z.object({
  height: z.string().min(1, "Height is required"),
  age: z.number().positive("Age must be positive"),
  gender: z.enum(["Male", "Female", "Other"]).optional(),
  weight: z.string().min(1, "Weight is required"),
  glucose: z.string().min(1, "Glucose level is required"),
  notes: z.string().max(140, "Notes must be 140 characters or less").optional(),
});

export type HealthData = z.infer<typeof HealthDataSchema>;

// Family Member Types
export type FamilyMember = 'Adam' | 'Holly' | 'Ethan' | 'Elle';

export interface AppState {
  Adam: HealthData;
  Holly: HealthData;
  Ethan: HealthData;
  Elle: HealthData;
}

// Travel Types
export interface TripRequest {
  type: 'cruise' | 'flight' | 'roadtrip' | 'hybrid';
  startDate: Date;
  endDate: Date;
  origin: string;
  destinations: string[];
  budget: {
    total: number;
    flexibility: 'strict' | 'flexible' | 'very-flexible';
  };
  interests: string[];
}

export interface FamilyData {
  id: string;
  name: string;
  members: Array<{

Running TypeScript compiler check:
